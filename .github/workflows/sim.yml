name: Simulators

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '30 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: goto-bus-stop/setup-zig@v2
      with:
        version: 0.14.1
    - name: test
      run: zig build test

  dht-sim:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        run: [1, 2, 3]
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - uses: goto-bus-stop/setup-zig@v2
      with:
        version: 0.14.1
    
    - name: gen_params
      id: p
      run: |
        S=$((GITHUB_RUN_NUMBER + ${{ matrix.run }} + $(date +%s)))
        P=$((10 + S % 41))
        R=$((50 + S % 151))
        echo "dht run ${{ matrix.run }}: seed=$S peers=$P rate=$R duration=180s"
        echo "seed=$S" >> $GITHUB_OUTPUT
        echo "peers=$P" >> $GITHUB_OUTPUT
        echo "rate=$R" >> $GITHUB_OUTPUT

    - name: sim
      run: |
        zig build sim-dht -- --duration 180 --peers ${{ steps.p.outputs.peers }} --rate ${{ steps.p.outputs.rate }} --seed ${{ steps.p.outputs.seed }}

    - name: clean
      if: always()
      run: rm -f .dht_peers_*

  neuron-sim:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        model: [lif]
        run: [1, 2, 3]
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - uses: goto-bus-stop/setup-zig@v2
      with:
        version: 0.14.1

    - name: gen_params
      id: p
      run: |
        S=$((GITHUB_RUN_NUMBER + ${{ matrix.run }} + $(date +%s)))
        case ${{ matrix.model }} in
          lif)
            C=$(echo "scale=1; 2 + ($S % 100) / 10" | bc -l)
            D=$((500 + S % 1001))
            echo "lif run ${{ matrix.run }}: current=${C}nA duration=${D}ms"
            echo "current=$C" >> $GITHUB_OUTPUT
            echo "duration=$D" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: sim
      run: |
        case ${{ matrix.model }} in
          lif)
            zig build sim-neuron-lif -- --duration ${{ steps.p.outputs.duration }} --current ${{ steps.p.outputs.current }}
            ;;
        esac

  summary:
    runs-on: ubuntu-latest
    needs: [dht-sim, neuron-sim]
    if: always()
    steps:
    - run: |
        echo "test: ${{ needs.test.result }}"
        echo "dht-sim: ${{ needs.dht-sim.result }}"
        echo "neuron-sim: ${{ needs.neuron-sim.result }}"
        echo "overall: $([ "${{ needs.dht-sim.result }}" = "success" ] && [ "${{ needs.neuron-sim.result }}" = "success" ] && echo "success" || echo "failure")"
        test "${{ needs.dht-sim.result }}" = "success"
        test "${{ needs.neuron-sim.result }}" = "success"
